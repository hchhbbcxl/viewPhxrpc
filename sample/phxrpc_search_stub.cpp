/* phxrpc_search_stub.cpp

 Generated by phxrpc_pb2client from search.proto

 Please DO NOT edit unless you know exactly what you are doing.

*/

#include "phxrpc/rpc.h"
#include "phxrpc/network.h"

#include "phxrpc_search_stub.h"
#include "search.pb.h"

SearchStub :: SearchStub( phxrpc::BaseTcpStream & socket, phxrpc::ClientMonitor & client_monitor )
    : socket_( socket ), client_monitor_(client_monitor), keep_alive_(false)
{
}

SearchStub :: ~SearchStub()
{
}

void SearchStub :: SetKeepAlive( const bool keep_alive )
{
    keep_alive_ = keep_alive;
}

int SearchStub :: PHXEcho( const google::protobuf::StringValue & req,
        google::protobuf::StringValue * resp )
{
    phxrpc::HttpCaller caller( socket_, client_monitor_ );
    caller.SetURI( "/search/PHXEcho", -1 );
    caller.SetKeepAlive( keep_alive_ );
    return caller.Call( req, resp );
}

int SearchStub :: Search( const search::SearchRequest & req,
        search::SearchResult * resp )
{
    phxrpc::HttpCaller caller( socket_, client_monitor_ );
    caller.SetURI( "/search/Search", 1 );
    caller.SetKeepAlive( keep_alive_ );
    return caller.Call( req, resp );
}

int SearchStub :: Notify( const google::protobuf::StringValue & req,
        google::protobuf::Empty * resp )
{
    phxrpc::HttpCaller caller( socket_, client_monitor_ );
    caller.SetURI( "/search/Notify", 2 );
    caller.SetKeepAlive( keep_alive_ );
    return caller.Call( req, resp );
}

