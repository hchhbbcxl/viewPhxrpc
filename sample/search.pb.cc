// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace search {

namespace {

const ::google::protobuf::Descriptor* Site_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Site_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SiteType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_search_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_search_2eproto() {
  protobuf_AddDesc_search_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "search.proto");
  GOOGLE_CHECK(file != NULL);
  Site_descriptor_ = file->message_type(0);
  static const int Site_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, summary_),
  };
  Site_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Site_descriptor_,
      Site::default_instance_,
      Site_offsets_,
      -1,
      -1,
      -1,
      sizeof(Site),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, _is_default_instance_));
  SearchRequest_descriptor_ = file->message_type(1);
  static const int SearchRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, query_),
  };
  SearchRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchRequest_descriptor_,
      SearchRequest::default_instance_,
      SearchRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _is_default_instance_));
  SearchResult_descriptor_ = file->message_type(2);
  static const int SearchResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, sites_),
  };
  SearchResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchResult_descriptor_,
      SearchResult::default_instance_,
      SearchResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _is_default_instance_));
  SiteType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_search_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Site_descriptor_, &Site::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchRequest_descriptor_, &SearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchResult_descriptor_, &SearchResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_search_2eproto() {
  delete Site::default_instance_;
  delete Site_reflection_;
  delete SearchRequest::default_instance_;
  delete SearchRequest_reflection_;
  delete SearchResult::default_instance_;
  delete SearchResult_reflection_;
}

void protobuf_AddDesc_search_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_search_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::phxrpc::protobuf_AddDesc_phxrpc_2frpc_2fphxrpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014search.proto\022\006search\032\036google/protobuf/"
    "wrappers.proto\032\033google/protobuf/empty.pr"
    "oto\032\027phxrpc/rpc/phxrpc.proto\"S\n\004Site\022\013\n\003"
    "url\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\036\n\004type\030\003 \001(\0162\020"
    ".search.SiteType\022\017\n\007summary\030\004 \001(\t\"\036\n\rSea"
    "rchRequest\022\r\n\005query\030\001 \001(\t\"+\n\014SearchResul"
    "t\022\033\n\005sites\030\001 \003(\0132\014.search.Site*6\n\010SiteTy"
    "pe\022\010\n\004BLOG\020\000\022\010\n\004NEWS\020\001\022\t\n\005VIDEO\020\002\022\013\n\007UNK"
    "NOWN\020\0032\267\001\n\006Search\022R\n\006Search\022\025.search.Sea"
    "rchRequest\032\024.search.SearchResult\"\033\200\310\320\007\001\212"
    "\310\320\007\002q:\222\310\320\007\n-q <query>\022Y\n\006Notify\022\034.google"
    ".protobuf.StringValue\032\026.google.protobuf."
    "Empty\"\031\200\310\320\007\002\212\310\320\007\002m:\222\310\320\007\010-m <msg>b\006proto3", 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "search.proto", &protobuf_RegisterTypes);
  Site::default_instance_ = new Site();
  SearchRequest::default_instance_ = new SearchRequest();
  SearchResult::default_instance_ = new SearchResult();
  Site::default_instance_->InitAsDefaultInstance();
  SearchRequest::default_instance_->InitAsDefaultInstance();
  SearchResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_search_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_search_2eproto {
  StaticDescriptorInitializer_search_2eproto() {
    protobuf_AddDesc_search_2eproto();
  }
} static_descriptor_initializer_search_2eproto_;
const ::google::protobuf::EnumDescriptor* SiteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SiteType_descriptor_;
}
bool SiteType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Site::kUrlFieldNumber;
const int Site::kTitleFieldNumber;
const int Site::kTypeFieldNumber;
const int Site::kSummaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Site::Site()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:search.Site)
}

void Site::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Site::Site(const Site& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:search.Site)
}

void Site::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  summary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Site::~Site() {
  // @@protoc_insertion_point(destructor:search.Site)
  SharedDtor();
}

void Site::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Site::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Site::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Site_descriptor_;
}

const Site& Site::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();
  return *default_instance_;
}

Site* Site::default_instance_ = NULL;

Site* Site::New(::google::protobuf::Arena* arena) const {
  Site* n = new Site;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Site::Clear() {
// @@protoc_insertion_point(message_clear_start:search.Site)
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  summary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Site::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:search.Site)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "search.Site.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "search.Site.title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .search.SiteType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::search::SiteType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_summary;
        break;
      }

      // optional string summary = 4;
      case 4: {
        if (tag == 34) {
         parse_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "search.Site.summary"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:search.Site)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:search.Site)
  return false;
#undef DO_
}

void Site::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:search.Site)
  // optional string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "search.Site.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "search.Site.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional .search.SiteType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string summary = 4;
  if (this->summary().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "search.Site.summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->summary(), output);
  }

  // @@protoc_insertion_point(serialize_end:search.Site)
}

::google::protobuf::uint8* Site::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:search.Site)
  // optional string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "search.Site.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "search.Site.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional .search.SiteType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string summary = 4;
  if (this->summary().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "search.Site.summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->summary(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:search.Site)
  return target;
}

int Site::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:search.Site)
  int total_size = 0;

  // optional string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // optional .search.SiteType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string summary = 4;
  if (this->summary().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->summary());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Site::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:search.Site)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Site* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Site>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:search.Site)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:search.Site)
    MergeFrom(*source);
  }
}

void Site::MergeFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search.Site)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.summary().size() > 0) {

    summary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summary_);
  }
}

void Site::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:search.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Site::CopyFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Site::IsInitialized() const {

  return true;
}

void Site::Swap(Site* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Site::InternalSwap(Site* other) {
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  std::swap(type_, other->type_);
  summary_.Swap(&other->summary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Site::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Site_descriptor_;
  metadata.reflection = Site_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Site

// optional string url = 1;
void Site::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Site::url() const {
  // @@protoc_insertion_point(field_get:search.Site.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:search.Site.url)
}
 void Site::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:search.Site.url)
}
 void Site::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:search.Site.url)
}
 ::std::string* Site::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:search.Site.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Site::release_url() {
  // @@protoc_insertion_point(field_release:search.Site.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:search.Site.url)
}

// optional string title = 2;
void Site::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Site::title() const {
  // @@protoc_insertion_point(field_get:search.Site.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:search.Site.title)
}
 void Site::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:search.Site.title)
}
 void Site::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:search.Site.title)
}
 ::std::string* Site::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:search.Site.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Site::release_title() {
  // @@protoc_insertion_point(field_release:search.Site.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:search.Site.title)
}

// optional .search.SiteType type = 3;
void Site::clear_type() {
  type_ = 0;
}
 ::search::SiteType Site::type() const {
  // @@protoc_insertion_point(field_get:search.Site.type)
  return static_cast< ::search::SiteType >(type_);
}
 void Site::set_type(::search::SiteType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:search.Site.type)
}

// optional string summary = 4;
void Site::clear_summary() {
  summary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Site::summary() const {
  // @@protoc_insertion_point(field_get:search.Site.summary)
  return summary_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_summary(const ::std::string& value) {
  
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:search.Site.summary)
}
 void Site::set_summary(const char* value) {
  
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:search.Site.summary)
}
 void Site::set_summary(const char* value, size_t size) {
  
  summary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:search.Site.summary)
}
 ::std::string* Site::mutable_summary() {
  
  // @@protoc_insertion_point(field_mutable:search.Site.summary)
  return summary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Site::release_summary() {
  // @@protoc_insertion_point(field_release:search.Site.summary)
  
  return summary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_allocated_summary(::std::string* summary) {
  if (summary != NULL) {
    
  } else {
    
  }
  summary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), summary);
  // @@protoc_insertion_point(field_set_allocated:search.Site.summary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRequest::SearchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:search.SearchRequest)
}

void SearchRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SearchRequest::SearchRequest(const SearchRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:search.SearchRequest)
}

void SearchRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:search.SearchRequest)
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchRequest_descriptor_;
}

const SearchRequest& SearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();
  return *default_instance_;
}

SearchRequest* SearchRequest::default_instance_ = NULL;

SearchRequest* SearchRequest::New(::google::protobuf::Arena* arena) const {
  SearchRequest* n = new SearchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:search.SearchRequest)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:search.SearchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "search.SearchRequest.query"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:search.SearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:search.SearchRequest)
  return false;
#undef DO_
}

void SearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:search.SearchRequest)
  // optional string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "search.SearchRequest.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:search.SearchRequest)
}

::google::protobuf::uint8* SearchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:search.SearchRequest)
  // optional string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "search.SearchRequest.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:search.SearchRequest)
  return target;
}

int SearchRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:search.SearchRequest)
  int total_size = 0;

  // optional string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:search.SearchRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SearchRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:search.SearchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:search.SearchRequest)
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search.SearchRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:search.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {

  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRequest::InternalSwap(SearchRequest* other) {
  query_.Swap(&other->query_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchRequest_descriptor_;
  metadata.reflection = SearchRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchRequest

// optional string query = 1;
void SearchRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SearchRequest::query() const {
  // @@protoc_insertion_point(field_get:search.SearchRequest.query)
  return query_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SearchRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:search.SearchRequest.query)
}
 void SearchRequest::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:search.SearchRequest.query)
}
 void SearchRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:search.SearchRequest.query)
}
 ::std::string* SearchRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:search.SearchRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SearchRequest::release_query() {
  // @@protoc_insertion_point(field_release:search.SearchRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SearchRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:search.SearchRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchResult::kSitesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchResult::SearchResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:search.SearchResult)
}

void SearchResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SearchResult::SearchResult(const SearchResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:search.SearchResult)
}

void SearchResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SearchResult::~SearchResult() {
  // @@protoc_insertion_point(destructor:search.SearchResult)
  SharedDtor();
}

void SearchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResult_descriptor_;
}

const SearchResult& SearchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_search_2eproto();
  return *default_instance_;
}

SearchResult* SearchResult::default_instance_ = NULL;

SearchResult* SearchResult::New(::google::protobuf::Arena* arena) const {
  SearchResult* n = new SearchResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:search.SearchResult)
  sites_.Clear();
}

bool SearchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:search.SearchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .search.Site sites = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sites()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sites;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:search.SearchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:search.SearchResult)
  return false;
#undef DO_
}

void SearchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:search.SearchResult)
  // repeated .search.Site sites = 1;
  for (unsigned int i = 0, n = this->sites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sites(i), output);
  }

  // @@protoc_insertion_point(serialize_end:search.SearchResult)
}

::google::protobuf::uint8* SearchResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:search.SearchResult)
  // repeated .search.Site sites = 1;
  for (unsigned int i = 0, n = this->sites_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sites(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:search.SearchResult)
  return target;
}

int SearchResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:search.SearchResult)
  int total_size = 0;

  // repeated .search.Site sites = 1;
  total_size += 1 * this->sites_size();
  for (int i = 0; i < this->sites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sites(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:search.SearchResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SearchResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:search.SearchResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:search.SearchResult)
    MergeFrom(*source);
  }
}

void SearchResult::MergeFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:search.SearchResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sites_.MergeFrom(from.sites_);
}

void SearchResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:search.SearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResult::CopyFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:search.SearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResult::IsInitialized() const {

  return true;
}

void SearchResult::Swap(SearchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResult::InternalSwap(SearchResult* other) {
  sites_.UnsafeArenaSwap(&other->sites_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResult_descriptor_;
  metadata.reflection = SearchResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchResult

// repeated .search.Site sites = 1;
int SearchResult::sites_size() const {
  return sites_.size();
}
void SearchResult::clear_sites() {
  sites_.Clear();
}
const ::search::Site& SearchResult::sites(int index) const {
  // @@protoc_insertion_point(field_get:search.SearchResult.sites)
  return sites_.Get(index);
}
::search::Site* SearchResult::mutable_sites(int index) {
  // @@protoc_insertion_point(field_mutable:search.SearchResult.sites)
  return sites_.Mutable(index);
}
::search::Site* SearchResult::add_sites() {
  // @@protoc_insertion_point(field_add:search.SearchResult.sites)
  return sites_.Add();
}
::google::protobuf::RepeatedPtrField< ::search::Site >*
SearchResult::mutable_sites() {
  // @@protoc_insertion_point(field_mutable_list:search.SearchResult.sites)
  return &sites_;
}
const ::google::protobuf::RepeatedPtrField< ::search::Site >&
SearchResult::sites() const {
  // @@protoc_insertion_point(field_list:search.SearchResult.sites)
  return sites_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace search

// @@protoc_insertion_point(global_scope)
